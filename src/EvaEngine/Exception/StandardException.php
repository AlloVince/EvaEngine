<?php
/**
 * EvaEngine (http://evaengine.com/)
 * A development engine based on Phalcon Framework.
 *
 * @copyright Copyright (c) 2014-2015 EvaEngine Team (https://github.com/EvaEngine/EvaEngine)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Eva\EvaEngine\Exception;

use Phalcon\Exception as PhalconException;

/**
 * Standard Exception, default status code is 500
 * @package Eva\EvaEngine\Exception
 */
class StandardException extends PhalconException implements ExceptionInterface
{
    /**
     * @var int
     */
    protected $statusCode = 500;

    /**
     * @return int|string
     */
    public function getStatusCode()
    {
        return $this->statusCode;
    }

    public static function stringToNumberHash($str, $digits = 6)
    {
        //Max ascii code is 255
        //Max PHP int is 2147483647
        //So max allow string lenth is 800w
        $str = str_split($str);
        $strNumber = 0;
        foreach ($str as $charactor) {
            $strNumber += ord($charactor);
        }
        $dividNumber = (int)('1' . str_pad('', $digits, '0'));
        return $strNumber < $dividNumber ? $strNumber : $strNumber % $dividNumber;
    }

    public static function classNameToCode($className)
    {
        $classArr = explode('\\', strtolower($className));
        $exceptionId = str_replace('exception', '', array_pop($classArr));
        if (count($classArr) > 0) {
            $exceptionGroup = implode('', $classArr);
        } else {
            $exceptionGroup = 'evadefault';
        }
        //32bit PHP max allow int is 2147483647 (9 digits)
        return substr(crc32($exceptionGroup), 0, 3) . '00' . substr(crc32($exceptionId), 0, 4);
    }

    /*
    public static function classNameToCode($className)
    {
        $classArr = explode('\\', strtolower($className));
        $exceptionId = str_replace('exception', '', array_pop($classArr));
        if (count($classArr) > 0) {
            $exceptionGroup = implode('', $classArr);
        } else {
            $exceptionGroup = 'evadefault';
        }

        return
            '1' .
            str_pad(self::stringToNumberHash($exceptionGroup, 3), 3, '0', STR_PAD_LEFT) .
            '00' .
            str_pad(self::stringToNumberHash($exceptionId, 4), 4, '0', STR_PAD_LEFT);
    }
    */

    /**
     *
     * @param string $message
     * @param int $code
     * @param null|int|Exception $previous ,  when $previous is int,will use as status code
     * @param null $statusCode
     */
    public function __construct($message, $code = null, $previous = null, $statusCode = null)
    {
        //Allow the third paramater to be statuscode
        if (is_numeric($previous)) {
            $statusCode = $previous;
            $previous = null;
        }

        if ($statusCode && is_numeric($statusCode) && $statusCode > 99 && $statusCode < 600) {
            $this->statusCode = $statusCode;
        }

        //Generate a unique error code for each excetion
        //Error code is 9 digits number looks like 123004567.
        //-  123 (Group Number), generated by name space
        //-  00  (Split Number)
        //-  4567 (Exception Number), generated by exception name
        if (!$code) {
            $code = self::classNameToCode(get_class($this));
        }
        parent::__construct($message, $code, $previous);
    }
}
